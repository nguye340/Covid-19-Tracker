{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","isPurple","active","total","props","Card","onClick","className","CardContent","Typography","color","sortData","data","sortedData","sort","a","b","casesTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOppacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","Map","countries","zoom","console","log","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","gridLines","type","time","tooltipFormat","yAxes","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","backgroundColor","setBackgroundColor","borderColor","setBorderColor","useEffect","fetch","then","response","json","fetchData","length","datasets","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","err","FormControl","Select","variant","onChange","MenuItem","todayCases","e","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7b8d4d8.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({title, cases, isRed, isPurple, active, total, ...props}) {\r\n    return (\r\n        <Card \r\n            onClick={props.onClick} \r\n            className={`infoBox ${active && \"infoBox--selected\"} \r\n                        ${active && isRed && \"infoBox--red\"}\r\n                        ${active && isPurple && \"infoBox--purple\"}`}> \r\n            <CardContent>\r\n                <Typography className=\"infoBox_title\" color=\"textPrimary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className={`infoBox_cases ${!isRed && !isPurple && \"infoBox_cases--green\"}\r\n                                ${isPurple && \"infoBox_cases--purple\"}`}\r\n                                color=\"textSecondary !important;\"\r\n                >{cases} Today</h2>\r\n\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle, Popup} from \"react-leaflet\";\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    sortedData.sort((a,b) => a.cases > b.cases ? -1 : 1)\r\n    return sortedData;\r\n};\r\n\r\nconst casesTypeColors = {\r\n    cases:{\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#00DF00\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#4d0099\",\r\n        multiplier: 2000,\r\n    }\r\n};\r\n\r\n// Draw interactive circle on the map with tooltip\r\nexport const showDataOnMap = (data, casesType=\"cases\") => \r\n    data.map((country) => (\r\n        <Circle \r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOppacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                    />\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    )); \r\n\r\nexport const prettyPrintStat = (stat) =>\r\n        stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from 'react';\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            {console.log(center)}\r\n        <LeafletMap zoom={zoom} center={center}>\r\n            <TileLayer \r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {showDataOnMap(countries, casesType)}\r\n        </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\n\r\nfunction Table({countries}) {\r\n    return <div className=\"table scrollbar\">\r\n        {countries.map(({country, cases}) => (\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td>\r\n                    <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                </td>\r\n            </tr>\r\n        ))}\r\n    </div>\r\n}\r\n\r\nexport default Table\r\n","import React, {useState, useEffect} from 'react'\r\nimport {Line} from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options={\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips:{\r\n        mode:\"index\",\r\n        intersect: false,\r\n        callbacks:{\r\n            label: function (tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[\r\n            \r\n            {\r\n                gridLines: {\r\n                    display: true,\r\n                },\r\n                type: \"time\",\r\n                time:{\r\n                format: \"MM/DD/YY\",\r\n                tooltipFormat:\"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value,index,values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nconst buildChartData = (data, casesType=\"cases\") => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases) {\r\n        if (lastDataPoint){\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            };\r\n            chartData.push(newDataPoint);\r\n        };\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n\r\n    return chartData;\r\n}\r\n  \r\nfunction LineGraph({casesType, ...props}) {\r\n    const [data, setData] = useState({});\r\n    const [backgroundColor, setBackgroundColor] = useState('rgba(255, 0, 0, 0.3)');\r\n    const [borderColor, setBorderColor] = useState('#CC1034');\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async() => { \r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => { return response.json()})\r\n            .then((data) => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n                if(casesType === \"recovered\"){\r\n                    setBackgroundColor('rgba(51, 204, 51, 0.3)');\r\n                    setBorderColor(\"#33cc33\");\r\n                }\r\n                else\r\n                if(casesType === \"deaths\"){\r\n                    setBackgroundColor('rgba(89, 51, 204, 0.3)');\r\n                    setBorderColor(\"#5933cc\");\r\n                }\r\n                else {\r\n                    setBackgroundColor('rgba(255, 0, 0, 0.3)');\r\n                    setBorderColor(\"#CC1034\");\r\n                }\r\n            }); \r\n        };\r\n        fetchData();\r\n    },[casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (    \r\n                <Line\r\n                options={options} \r\n                data={{\r\n                datasets:[{\r\n                    backgroundColor: backgroundColor,\r\n                    borderColor: borderColor,\r\n                    data: data,\r\n                }]\r\n                }}/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, {useEffect, useState} from \"react\"\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport {Helmet} from \"react-helmet\";\nimport {sortData, prettyPrintStat} from \"./util\";\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\"; \n\nfunction App() {\n  \n  const[countries, setCountries] = useState([]);\n  const[country, setCountry] = useState(\"worldwide\");\n  const[countryInfo, setCountryInfo] = useState([]);\n  const[tableData, setTableData] = useState([]);\n  const[mapCenter, setMapCenter] = useState({lat: 0, lng: -0});\n  const[mapZoom, setMapZoom] = useState(3);\n  const[mapCountries, setMapCountries] = useState([]);\n  const[casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n        setCountryInfo(data);\n      });\n  },[]);\n\n  useEffect(() => {\n    const getCountriesData = async() => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n\n        let sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data); // every data not just name and value of al countries\n        setCountries(countries);\n\n      });\n    };\n    getCountriesData();\n  },[]);\n\n  const onCountryChange = async(event) => {\n    \n    const countryCode = event.target.value;\n    \n    const url = countryCode === 'worldwide'\n    ? 'https://disease.sh/v3/covid-19/all' \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    \n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      try {\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      }\n      catch(err) {\n        setMapCenter({lat: 34.80746, lng: -40.4796});\n        setMapZoom(3); \n      };\n     \n    });\n  };\n\n  return (\n    <div className=\"app\"> \n    \n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" \n            onChange={onCountryChange} value={country}> \n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {/* Loop through all the countries\n                  and show a drop down list of the options */}\n              {\n                countries.map(country=>(\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n      \n        <div className=\"app_stats\">\n          \n          <InfoBox \n            isRed\n            active={casesType === \"cases\"}\n            title=\"Coronavirus Cases\" \n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n            onClick={(e)=>setCasesType('cases')}  \n          />\n\n          <InfoBox \n            active={casesType === \"recovered\"}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)}\n            onClick={(e)=>setCasesType('recovered')}\n          />\n\n          <InfoBox \n            isPurple\n            active={casesType === \"deaths\"}\n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)}\n            onClick={(e)=>setCasesType('deaths')}\n          />\n              \n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom} \n        />\n      </div>\n      <div className=\"app_right\">\n        <Card className=\"app_right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData}>\n            </Table>\n            <h3 className=\"app_graph_title\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app_graph\" casesType={casesType} />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}